#pragma once

#include "libsersi/common/EntityID.h"
#include "libsersi/common/EventID.h"
#include "libsersi/common/Vector3Float.h"
#include "libsersi/distributed_emissions/DistributedEmissionsFamilyPdu.h"
#include "libsersi/distributed_emissions/IffFundamentalData.h"
#include "libsersi/distributed_emissions/SystemID.h"
#include "libsersi/utils/DataStream.h"

namespace dis {
// 5.3.7.4.1: Navigational and IFF PDU. COMPLETE

class IffAtcNavAidsLayer1Pdu : public DistributedEmissionsFamilyPdu {
 protected:
  /** ID of the entity that is the source of the emissions */
  EntityID emitting_entity_id_;

  /** Number generated by the issuing simulation to associate realted events. */
  EventID event_id_;

  /** Location wrt entity. There is some ambugiuity in the standard here, but
   * this is the order it is listed in the table. */
  Vector3Float location_;

  /** System ID information */
  SystemID system_id_;

  /** padding */
  uint16_t pad2_;

  /** fundamental parameters */
  IffFundamentalData fundamental_parameters_;

 public:
  IffAtcNavAidsLayer1Pdu();
  ~IffAtcNavAidsLayer1Pdu() override = default;

  void Marshal(DataStream& data_stream) const override;
  void Unmarshal(DataStream& data_stream) override;

  EntityID& GetEmittingEntityId();
  [[nodiscard]] const EntityID& GetEmittingEntityId() const;
  void SetEmittingEntityId(const EntityID& value);

  EventID& GetEventId();
  [[nodiscard]] const EventID& GetEventId() const;
  void SetEventId(const EventID& value);

  Vector3Float& GetLocation();
  [[nodiscard]] const Vector3Float& GetLocation() const;
  void SetLocation(const Vector3Float& value);

  SystemID& GetSystemId();
  [[nodiscard]] const SystemID& GetSystemId() const;
  void SetSystemId(const SystemID& value);

  [[nodiscard]] uint16_t GetPad2() const;
  void SetPad2(uint16_t value);

  IffFundamentalData& GetFundamentalParameters();
  [[nodiscard]] const IffFundamentalData& GetFundamentalParameters() const;
  void SetFundamentalParameters(const IffFundamentalData& value);

  [[nodiscard]] std::size_t GetMarshalledSize() const override;

  bool operator==(const IffAtcNavAidsLayer1Pdu& rhs) const;
};
}  // namespace dis
